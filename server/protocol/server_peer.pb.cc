// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_peer.proto

#include "server_peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_server_5fpeer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_fileInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_fileNameResponse;
}  // namespace protobuf_server_5fpeer_2eproto
class C2SShareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<C2SShare>
      _instance;
} _C2SShare_default_instance_;
class fileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<fileInfo>
      _instance;
} _fileInfo_default_instance_;
class S2CShareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2CShare>
      _instance;
} _S2CShare_default_instance_;
class fileNameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<fileNameResponse>
      _instance;
} _fileNameResponse_default_instance_;
class C2SQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<C2SQuery>
      _instance;
} _C2SQuery_default_instance_;
class S2CQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2CQuery>
      _instance;
} _S2CQuery_default_instance_;
class C2SDeleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<C2SDelete>
      _instance;
} _C2SDelete_default_instance_;
class S2CDeleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2CDelete>
      _instance;
} _S2CDelete_default_instance_;
class C2SQuitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<C2SQuit>
      _instance;
} _C2SQuit_default_instance_;
class S2CQuitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2CQuit>
      _instance;
} _S2CQuit_default_instance_;
namespace protobuf_server_5fpeer_2eproto {
static void InitDefaultsC2SShare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_C2SShare_default_instance_;
    new (ptr) ::C2SShare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::C2SShare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_C2SShare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsC2SShare}, {
      &protobuf_server_5fpeer_2eproto::scc_info_fileInfo.base,}};

static void InitDefaultsfileInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fileInfo_default_instance_;
    new (ptr) ::fileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_fileInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsfileInfo}, {}};

static void InitDefaultsS2CShare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_S2CShare_default_instance_;
    new (ptr) ::S2CShare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::S2CShare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_S2CShare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2CShare}, {
      &protobuf_server_5fpeer_2eproto::scc_info_fileNameResponse.base,}};

static void InitDefaultsfileNameResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fileNameResponse_default_instance_;
    new (ptr) ::fileNameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileNameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_fileNameResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsfileNameResponse}, {}};

static void InitDefaultsC2SQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_C2SQuery_default_instance_;
    new (ptr) ::C2SQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::C2SQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_C2SQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsC2SQuery}, {}};

static void InitDefaultsS2CQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_S2CQuery_default_instance_;
    new (ptr) ::S2CQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::S2CQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_S2CQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2CQuery}, {}};

static void InitDefaultsC2SDelete() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_C2SDelete_default_instance_;
    new (ptr) ::C2SDelete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::C2SDelete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_C2SDelete =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsC2SDelete}, {}};

static void InitDefaultsS2CDelete() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_S2CDelete_default_instance_;
    new (ptr) ::S2CDelete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::S2CDelete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_S2CDelete =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2CDelete}, {
      &protobuf_server_5fpeer_2eproto::scc_info_fileNameResponse.base,}};

static void InitDefaultsC2SQuit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_C2SQuit_default_instance_;
    new (ptr) ::C2SQuit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::C2SQuit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_C2SQuit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsC2SQuit}, {}};

static void InitDefaultsS2CQuit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_S2CQuit_default_instance_;
    new (ptr) ::S2CQuit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::S2CQuit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_S2CQuit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2CQuit}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_C2SShare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_fileInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2CShare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_fileNameResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_C2SQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2CQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_C2SDelete.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2CDelete.base);
  ::google::protobuf::internal::InitSCC(&scc_info_C2SQuit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2CQuit.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SShare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SShare, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SShare, file_info_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileInfo, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileInfo, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileInfo, file_ttl_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CShare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CShare, resp_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileNameResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileNameResponse, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileNameResponse, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SQuery, file_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuery, resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuery, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuery, target_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuery, target_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuery, file_size_),
  1,
  0,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SDelete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SDelete, file_name_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CDelete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CDelete, resp_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SQuit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::C2SQuit, request_quit_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::S2CQuit, resp_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::C2SShare)},
  { 9, 17, sizeof(::fileInfo)},
  { 20, 26, sizeof(::S2CShare)},
  { 27, 34, sizeof(::fileNameResponse)},
  { 36, 42, sizeof(::C2SQuery)},
  { 43, 53, sizeof(::S2CQuery)},
  { 58, 64, sizeof(::C2SDelete)},
  { 65, 71, sizeof(::S2CDelete)},
  { 72, 78, sizeof(::C2SQuit)},
  { 79, 85, sizeof(::S2CQuit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_C2SShare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_fileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_S2CShare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_fileNameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_C2SQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_S2CQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_C2SDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_S2CDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_C2SQuit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_S2CQuit_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "server_peer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021server_peer.proto\"6\n\010C2SShare\022\014\n\004port\030"
      "\001 \002(\005\022\034\n\tfile_info\030\002 \003(\0132\t.fileInfo\"B\n\010f"
      "ileInfo\022\021\n\tfile_name\030\001 \002(\t\022\021\n\tfile_size\030"
      "\002 \002(\003\022\020\n\010file_ttl\030\003 \002(\003\"+\n\010S2CShare\022\037\n\004r"
      "esp\030\001 \003(\0132\021.fileNameResponse\"3\n\020fileName"
      "Response\022\021\n\tfile_name\030\001 \002(\t\022\014\n\004resp\030\002 \002("
      "\010\"\035\n\010C2SQuery\022\021\n\tfile_name\030\001 \002(\t\"f\n\010S2CQ"
      "uery\022\014\n\004resp\030\001 \002(\010\022\021\n\tfile_name\030\002 \001(\t\022\021\n"
      "\ttarget_ip\030\003 \001(\003\022\023\n\013target_port\030\004 \001(\005\022\021\n"
      "\tfile_size\030\005 \001(\003\"\036\n\tC2SDelete\022\021\n\tfile_na"
      "me\030\001 \003(\t\",\n\tS2CDelete\022\037\n\004resp\030\001 \003(\0132\021.fi"
      "leNameResponse\"\037\n\007C2SQuit\022\024\n\014request_qui"
      "t\030\001 \002(\005\"\027\n\007S2CQuit\022\014\n\004resp\030\001 \002(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_peer.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_server_5fpeer_2eproto

// ===================================================================

void C2SShare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2SShare::kPortFieldNumber;
const int C2SShare::kFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2SShare::C2SShare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_C2SShare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2SShare)
}
C2SShare::C2SShare(const C2SShare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      file_info_(from.file_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:C2SShare)
}

void C2SShare::SharedCtor() {
  port_ = 0;
}

C2SShare::~C2SShare() {
  // @@protoc_insertion_point(destructor:C2SShare)
  SharedDtor();
}

void C2SShare::SharedDtor() {
}

void C2SShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* C2SShare::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2SShare& C2SShare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_C2SShare.base);
  return *internal_default_instance();
}


void C2SShare::Clear() {
// @@protoc_insertion_point(message_clear_start:C2SShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_info_.Clear();
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool C2SShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:C2SShare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fileInfo file_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:C2SShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:C2SShare)
  return false;
#undef DO_
}

void C2SShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:C2SShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // repeated .fileInfo file_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->file_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:C2SShare)
}

::google::protobuf::uint8* C2SShare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:C2SShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // repeated .fileInfo file_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->file_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2SShare)
  return target;
}

size_t C2SShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2SShare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 port = 1;
  if (has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }
  // repeated .fileInfo file_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->file_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->file_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2SShare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2SShare)
  GOOGLE_DCHECK_NE(&from, this);
  const C2SShare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2SShare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2SShare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2SShare)
    MergeFrom(*source);
  }
}

void C2SShare::MergeFrom(const C2SShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2SShare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_info_.MergeFrom(from.file_info_);
  if (from.has_port()) {
    set_port(from.port());
  }
}

void C2SShare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2SShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SShare::CopyFrom(const C2SShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2SShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SShare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->file_info())) return false;
  return true;
}

void C2SShare::Swap(C2SShare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2SShare::InternalSwap(C2SShare* other) {
  using std::swap;
  CastToBase(&file_info_)->InternalSwap(CastToBase(&other->file_info_));
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata C2SShare::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void fileInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fileInfo::kFileNameFieldNumber;
const int fileInfo::kFileSizeFieldNumber;
const int fileInfo::kFileTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fileInfo::fileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_fileInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileInfo)
}
fileInfo::fileInfo(const fileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_ttl_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(file_ttl_));
  // @@protoc_insertion_point(copy_constructor:fileInfo)
}

void fileInfo::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_ttl_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(file_ttl_));
}

fileInfo::~fileInfo() {
  // @@protoc_insertion_point(destructor:fileInfo)
  SharedDtor();
}

void fileInfo::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void fileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* fileInfo::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const fileInfo& fileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_fileInfo.base);
  return *internal_default_instance();
}


void fileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&file_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_ttl_) -
        reinterpret_cast<char*>(&file_size_)) + sizeof(file_ttl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileInfo.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 file_ttl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_file_ttl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileInfo)
  return false;
#undef DO_
}

void fileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileInfo.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // required int64 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_size(), output);
  }

  // required int64 file_ttl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->file_ttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fileInfo)
}

::google::protobuf::uint8* fileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileInfo.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // required int64 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_size(), target);
  }

  // required int64 file_ttl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->file_ttl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fileInfo)
  return target;
}

size_t fileInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fileInfo)
  size_t total_size = 0;

  if (has_file_name()) {
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_file_size()) {
    // required int64 file_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_size());
  }

  if (has_file_ttl()) {
    // required int64 file_ttl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_ttl());
  }

  return total_size;
}
size_t fileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required int64 file_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_size());

    // required int64 file_ttl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_ttl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const fileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fileInfo)
    MergeFrom(*source);
  }
}

void fileInfo::MergeFrom(const fileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_ttl_ = from.file_ttl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fileInfo::CopyFrom(const fileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void fileInfo::Swap(fileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fileInfo::InternalSwap(fileInfo* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  swap(file_ttl_, other->file_ttl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata fileInfo::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2CShare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2CShare::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2CShare::S2CShare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_S2CShare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:S2CShare)
}
S2CShare::S2CShare(const S2CShare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      resp_(from.resp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:S2CShare)
}

void S2CShare::SharedCtor() {
}

S2CShare::~S2CShare() {
  // @@protoc_insertion_point(destructor:S2CShare)
  SharedDtor();
}

void S2CShare::SharedDtor() {
}

void S2CShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2CShare::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2CShare& S2CShare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_S2CShare.base);
  return *internal_default_instance();
}


void S2CShare::Clear() {
// @@protoc_insertion_point(message_clear_start:S2CShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2CShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S2CShare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fileNameResponse resp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S2CShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S2CShare)
  return false;
#undef DO_
}

void S2CShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S2CShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fileNameResponse resp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->resp(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S2CShare)
}

::google::protobuf::uint8* S2CShare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:S2CShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fileNameResponse resp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->resp(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S2CShare)
  return target;
}

size_t S2CShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:S2CShare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fileNameResponse resp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->resp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->resp(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2CShare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:S2CShare)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CShare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2CShare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:S2CShare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:S2CShare)
    MergeFrom(*source);
  }
}

void S2CShare::MergeFrom(const S2CShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:S2CShare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resp_.MergeFrom(from.resp_);
}

void S2CShare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:S2CShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CShare::CopyFrom(const S2CShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:S2CShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CShare::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->resp())) return false;
  return true;
}

void S2CShare::Swap(S2CShare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2CShare::InternalSwap(S2CShare* other) {
  using std::swap;
  CastToBase(&resp_)->InternalSwap(CastToBase(&other->resp_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2CShare::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void fileNameResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fileNameResponse::kFileNameFieldNumber;
const int fileNameResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fileNameResponse::fileNameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_fileNameResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileNameResponse)
}
fileNameResponse::fileNameResponse(const fileNameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  resp_ = from.resp_;
  // @@protoc_insertion_point(copy_constructor:fileNameResponse)
}

void fileNameResponse::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resp_ = false;
}

fileNameResponse::~fileNameResponse() {
  // @@protoc_insertion_point(destructor:fileNameResponse)
  SharedDtor();
}

void fileNameResponse::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void fileNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* fileNameResponse::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const fileNameResponse& fileNameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_fileNameResponse.base);
  return *internal_default_instance();
}


void fileNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fileNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  resp_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fileNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fileNameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileNameResponse.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileNameResponse)
  return false;
#undef DO_
}

void fileNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileNameResponse.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // required bool resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fileNameResponse)
}

::google::protobuf::uint8* fileNameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fileNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileNameResponse.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // required bool resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->resp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fileNameResponse)
  return target;
}

size_t fileNameResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fileNameResponse)
  size_t total_size = 0;

  if (has_file_name()) {
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_resp()) {
    // required bool resp = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t fileNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileNameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required bool resp = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fileNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fileNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const fileNameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fileNameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fileNameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fileNameResponse)
    MergeFrom(*source);
  }
}

void fileNameResponse::MergeFrom(const fileNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      resp_ = from.resp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fileNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fileNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fileNameResponse::CopyFrom(const fileNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fileNameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fileNameResponse::Swap(fileNameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fileNameResponse::InternalSwap(fileNameResponse* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata fileNameResponse::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void C2SQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2SQuery::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2SQuery::C2SQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_C2SQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2SQuery)
}
C2SQuery::C2SQuery(const C2SQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  // @@protoc_insertion_point(copy_constructor:C2SQuery)
}

void C2SQuery::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

C2SQuery::~C2SQuery() {
  // @@protoc_insertion_point(destructor:C2SQuery)
  SharedDtor();
}

void C2SQuery::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void C2SQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* C2SQuery::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2SQuery& C2SQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_C2SQuery.base);
  return *internal_default_instance();
}


void C2SQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:C2SQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool C2SQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:C2SQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "C2SQuery.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:C2SQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:C2SQuery)
  return false;
#undef DO_
}

void C2SQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:C2SQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "C2SQuery.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:C2SQuery)
}

::google::protobuf::uint8* C2SQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:C2SQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "C2SQuery.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2SQuery)
  return target;
}

size_t C2SQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2SQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2SQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2SQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const C2SQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2SQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2SQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2SQuery)
    MergeFrom(*source);
  }
}

void C2SQuery::MergeFrom(const C2SQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2SQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_name()) {
    set_has_file_name();
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void C2SQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2SQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SQuery::CopyFrom(const C2SQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2SQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void C2SQuery::Swap(C2SQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2SQuery::InternalSwap(C2SQuery* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata C2SQuery::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2CQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2CQuery::kRespFieldNumber;
const int S2CQuery::kFileNameFieldNumber;
const int S2CQuery::kTargetIpFieldNumber;
const int S2CQuery::kTargetPortFieldNumber;
const int S2CQuery::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2CQuery::S2CQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_S2CQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:S2CQuery)
}
S2CQuery::S2CQuery(const S2CQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&resp_, &from.resp_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&resp_)) + sizeof(file_size_));
  // @@protoc_insertion_point(copy_constructor:S2CQuery)
}

void S2CQuery::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&resp_)) + sizeof(file_size_));
}

S2CQuery::~S2CQuery() {
  // @@protoc_insertion_point(destructor:S2CQuery)
  SharedDtor();
}

void S2CQuery::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2CQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2CQuery::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2CQuery& S2CQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_S2CQuery.base);
  return *internal_default_instance();
}


void S2CQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:S2CQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&resp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_size_) -
        reinterpret_cast<char*>(&resp_)) + sizeof(file_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2CQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S2CQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool resp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "S2CQuery.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 target_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_target_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S2CQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S2CQuery)
  return false;
#undef DO_
}

void S2CQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S2CQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool resp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->resp(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "S2CQuery.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional int64 target_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_ip(), output);
  }

  // optional int32 target_port = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_port(), output);
  }

  // optional int64 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->file_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S2CQuery)
}

::google::protobuf::uint8* S2CQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:S2CQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool resp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->resp(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "S2CQuery.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional int64 target_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_ip(), target);
  }

  // optional int32 target_port = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_port(), target);
  }

  // optional int64 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->file_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S2CQuery)
  return target;
}

size_t S2CQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:S2CQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool resp = 1;
  if (has_resp()) {
    total_size += 1 + 1;
  }
  // optional string file_name = 2;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 target_port = 4;
    if (has_target_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_port());
    }

    // optional int64 target_ip = 3;
    if (has_target_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_ip());
    }

    // optional int64 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2CQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:S2CQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2CQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:S2CQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:S2CQuery)
    MergeFrom(*source);
  }
}

void S2CQuery::MergeFrom(const S2CQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:S2CQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      resp_ = from.resp_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_port_ = from.target_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_ip_ = from.target_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2CQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:S2CQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CQuery::CopyFrom(const S2CQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:S2CQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void S2CQuery::Swap(S2CQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2CQuery::InternalSwap(S2CQuery* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resp_, other->resp_);
  swap(target_port_, other->target_port_);
  swap(target_ip_, other->target_ip_);
  swap(file_size_, other->file_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2CQuery::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void C2SDelete::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2SDelete::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2SDelete::C2SDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_C2SDelete.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2SDelete)
}
C2SDelete::C2SDelete(const C2SDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      file_name_(from.file_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:C2SDelete)
}

void C2SDelete::SharedCtor() {
}

C2SDelete::~C2SDelete() {
  // @@protoc_insertion_point(destructor:C2SDelete)
  SharedDtor();
}

void C2SDelete::SharedDtor() {
}

void C2SDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* C2SDelete::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2SDelete& C2SDelete::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_C2SDelete.base);
  return *internal_default_instance();
}


void C2SDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:C2SDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool C2SDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:C2SDelete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name(this->file_name_size() - 1).data(),
            static_cast<int>(this->file_name(this->file_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "C2SDelete.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:C2SDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:C2SDelete)
  return false;
#undef DO_
}

void C2SDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:C2SDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_name = 1;
  for (int i = 0, n = this->file_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name(i).data(), static_cast<int>(this->file_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "C2SDelete.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:C2SDelete)
}

::google::protobuf::uint8* C2SDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:C2SDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_name = 1;
  for (int i = 0, n = this->file_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name(i).data(), static_cast<int>(this->file_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "C2SDelete.file_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->file_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2SDelete)
  return target;
}

size_t C2SDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2SDelete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string file_name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->file_name_size());
  for (int i = 0, n = this->file_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file_name(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2SDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2SDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const C2SDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2SDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2SDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2SDelete)
    MergeFrom(*source);
  }
}

void C2SDelete::MergeFrom(const C2SDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2SDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_name_.MergeFrom(from.file_name_);
}

void C2SDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2SDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SDelete::CopyFrom(const C2SDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2SDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SDelete::IsInitialized() const {
  return true;
}

void C2SDelete::Swap(C2SDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2SDelete::InternalSwap(C2SDelete* other) {
  using std::swap;
  file_name_.InternalSwap(CastToBase(&other->file_name_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata C2SDelete::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2CDelete::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2CDelete::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2CDelete::S2CDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_S2CDelete.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:S2CDelete)
}
S2CDelete::S2CDelete(const S2CDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      resp_(from.resp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:S2CDelete)
}

void S2CDelete::SharedCtor() {
}

S2CDelete::~S2CDelete() {
  // @@protoc_insertion_point(destructor:S2CDelete)
  SharedDtor();
}

void S2CDelete::SharedDtor() {
}

void S2CDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2CDelete::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2CDelete& S2CDelete::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_S2CDelete.base);
  return *internal_default_instance();
}


void S2CDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:S2CDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2CDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S2CDelete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fileNameResponse resp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S2CDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S2CDelete)
  return false;
#undef DO_
}

void S2CDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S2CDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fileNameResponse resp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->resp(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S2CDelete)
}

::google::protobuf::uint8* S2CDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:S2CDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fileNameResponse resp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->resp(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S2CDelete)
  return target;
}

size_t S2CDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:S2CDelete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fileNameResponse resp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->resp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->resp(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2CDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:S2CDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2CDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:S2CDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:S2CDelete)
    MergeFrom(*source);
  }
}

void S2CDelete::MergeFrom(const S2CDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:S2CDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resp_.MergeFrom(from.resp_);
}

void S2CDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:S2CDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CDelete::CopyFrom(const S2CDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:S2CDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CDelete::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->resp())) return false;
  return true;
}

void S2CDelete::Swap(S2CDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2CDelete::InternalSwap(S2CDelete* other) {
  using std::swap;
  CastToBase(&resp_)->InternalSwap(CastToBase(&other->resp_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2CDelete::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void C2SQuit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2SQuit::kRequestQuitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2SQuit::C2SQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_C2SQuit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2SQuit)
}
C2SQuit::C2SQuit(const C2SQuit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_quit_ = from.request_quit_;
  // @@protoc_insertion_point(copy_constructor:C2SQuit)
}

void C2SQuit::SharedCtor() {
  request_quit_ = 0;
}

C2SQuit::~C2SQuit() {
  // @@protoc_insertion_point(destructor:C2SQuit)
  SharedDtor();
}

void C2SQuit::SharedDtor() {
}

void C2SQuit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* C2SQuit::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2SQuit& C2SQuit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_C2SQuit.base);
  return *internal_default_instance();
}


void C2SQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:C2SQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_quit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool C2SQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:C2SQuit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 request_quit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request_quit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_quit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:C2SQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:C2SQuit)
  return false;
#undef DO_
}

void C2SQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:C2SQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 request_quit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_quit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:C2SQuit)
}

::google::protobuf::uint8* C2SQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:C2SQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 request_quit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_quit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2SQuit)
  return target;
}

size_t C2SQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2SQuit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 request_quit = 1;
  if (has_request_quit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_quit());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2SQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2SQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const C2SQuit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2SQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2SQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2SQuit)
    MergeFrom(*source);
  }
}

void C2SQuit::MergeFrom(const C2SQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2SQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request_quit()) {
    set_request_quit(from.request_quit());
  }
}

void C2SQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2SQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SQuit::CopyFrom(const C2SQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2SQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void C2SQuit::Swap(C2SQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2SQuit::InternalSwap(C2SQuit* other) {
  using std::swap;
  swap(request_quit_, other->request_quit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata C2SQuit::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2CQuit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2CQuit::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2CQuit::S2CQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_5fpeer_2eproto::scc_info_S2CQuit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:S2CQuit)
}
S2CQuit::S2CQuit(const S2CQuit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resp_ = from.resp_;
  // @@protoc_insertion_point(copy_constructor:S2CQuit)
}

void S2CQuit::SharedCtor() {
  resp_ = false;
}

S2CQuit::~S2CQuit() {
  // @@protoc_insertion_point(destructor:S2CQuit)
  SharedDtor();
}

void S2CQuit::SharedDtor() {
}

void S2CQuit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2CQuit::descriptor() {
  ::protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2CQuit& S2CQuit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_5fpeer_2eproto::scc_info_S2CQuit.base);
  return *internal_default_instance();
}


void S2CQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:S2CQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2CQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S2CQuit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool resp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S2CQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S2CQuit)
  return false;
#undef DO_
}

void S2CQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S2CQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool resp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S2CQuit)
}

::google::protobuf::uint8* S2CQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:S2CQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool resp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->resp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S2CQuit)
  return target;
}

size_t S2CQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:S2CQuit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool resp = 1;
  if (has_resp()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2CQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:S2CQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CQuit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2CQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:S2CQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:S2CQuit)
    MergeFrom(*source);
  }
}

void S2CQuit::MergeFrom(const S2CQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:S2CQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resp()) {
    set_resp(from.resp());
  }
}

void S2CQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:S2CQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CQuit::CopyFrom(const S2CQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:S2CQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void S2CQuit::Swap(S2CQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2CQuit::InternalSwap(S2CQuit* other) {
  using std::swap;
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2CQuit::GetMetadata() const {
  protobuf_server_5fpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_5fpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::C2SShare* Arena::CreateMaybeMessage< ::C2SShare >(Arena* arena) {
  return Arena::CreateInternal< ::C2SShare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileInfo* Arena::CreateMaybeMessage< ::fileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::fileInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::S2CShare* Arena::CreateMaybeMessage< ::S2CShare >(Arena* arena) {
  return Arena::CreateInternal< ::S2CShare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileNameResponse* Arena::CreateMaybeMessage< ::fileNameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::fileNameResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::C2SQuery* Arena::CreateMaybeMessage< ::C2SQuery >(Arena* arena) {
  return Arena::CreateInternal< ::C2SQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::S2CQuery* Arena::CreateMaybeMessage< ::S2CQuery >(Arena* arena) {
  return Arena::CreateInternal< ::S2CQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::C2SDelete* Arena::CreateMaybeMessage< ::C2SDelete >(Arena* arena) {
  return Arena::CreateInternal< ::C2SDelete >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::S2CDelete* Arena::CreateMaybeMessage< ::S2CDelete >(Arena* arena) {
  return Arena::CreateInternal< ::S2CDelete >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::C2SQuit* Arena::CreateMaybeMessage< ::C2SQuit >(Arena* arena) {
  return Arena::CreateInternal< ::C2SQuit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::S2CQuit* Arena::CreateMaybeMessage< ::S2CQuit >(Arena* arena) {
  return Arena::CreateInternal< ::S2CQuit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
