// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_peer.proto

#ifndef PROTOBUF_INCLUDED_server_5fpeer_2eproto
#define PROTOBUF_INCLUDED_server_5fpeer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fpeer_2eproto 

namespace protobuf_server_5fpeer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_5fpeer_2eproto
class C2SDelete;
class C2SDeleteDefaultTypeInternal;
extern C2SDeleteDefaultTypeInternal _C2SDelete_default_instance_;
class C2SQuery;
class C2SQueryDefaultTypeInternal;
extern C2SQueryDefaultTypeInternal _C2SQuery_default_instance_;
class C2SQuit;
class C2SQuitDefaultTypeInternal;
extern C2SQuitDefaultTypeInternal _C2SQuit_default_instance_;
class C2SShare;
class C2SShareDefaultTypeInternal;
extern C2SShareDefaultTypeInternal _C2SShare_default_instance_;
class S2CDelete;
class S2CDeleteDefaultTypeInternal;
extern S2CDeleteDefaultTypeInternal _S2CDelete_default_instance_;
class S2CQuery;
class S2CQueryDefaultTypeInternal;
extern S2CQueryDefaultTypeInternal _S2CQuery_default_instance_;
class S2CQuit;
class S2CQuitDefaultTypeInternal;
extern S2CQuitDefaultTypeInternal _S2CQuit_default_instance_;
class S2CShare;
class S2CShareDefaultTypeInternal;
extern S2CShareDefaultTypeInternal _S2CShare_default_instance_;
class fileInfo;
class fileInfoDefaultTypeInternal;
extern fileInfoDefaultTypeInternal _fileInfo_default_instance_;
class fileNameResponse;
class fileNameResponseDefaultTypeInternal;
extern fileNameResponseDefaultTypeInternal _fileNameResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::C2SDelete* Arena::CreateMaybeMessage<::C2SDelete>(Arena*);
template<> ::C2SQuery* Arena::CreateMaybeMessage<::C2SQuery>(Arena*);
template<> ::C2SQuit* Arena::CreateMaybeMessage<::C2SQuit>(Arena*);
template<> ::C2SShare* Arena::CreateMaybeMessage<::C2SShare>(Arena*);
template<> ::S2CDelete* Arena::CreateMaybeMessage<::S2CDelete>(Arena*);
template<> ::S2CQuery* Arena::CreateMaybeMessage<::S2CQuery>(Arena*);
template<> ::S2CQuit* Arena::CreateMaybeMessage<::S2CQuit>(Arena*);
template<> ::S2CShare* Arena::CreateMaybeMessage<::S2CShare>(Arena*);
template<> ::fileInfo* Arena::CreateMaybeMessage<::fileInfo>(Arena*);
template<> ::fileNameResponse* Arena::CreateMaybeMessage<::fileNameResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class C2SShare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:C2SShare) */ {
 public:
  C2SShare();
  virtual ~C2SShare();

  C2SShare(const C2SShare& from);

  inline C2SShare& operator=(const C2SShare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2SShare(C2SShare&& from) noexcept
    : C2SShare() {
    *this = ::std::move(from);
  }

  inline C2SShare& operator=(C2SShare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SShare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SShare* internal_default_instance() {
    return reinterpret_cast<const C2SShare*>(
               &_C2SShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(C2SShare* other);
  friend void swap(C2SShare& a, C2SShare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2SShare* New() const final {
    return CreateMaybeMessage<C2SShare>(NULL);
  }

  C2SShare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<C2SShare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const C2SShare& from);
  void MergeFrom(const C2SShare& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SShare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fileInfo file_info = 2;
  int file_info_size() const;
  void clear_file_info();
  static const int kFileInfoFieldNumber = 2;
  ::fileInfo* mutable_file_info(int index);
  ::google::protobuf::RepeatedPtrField< ::fileInfo >*
      mutable_file_info();
  const ::fileInfo& file_info(int index) const;
  ::fileInfo* add_file_info();
  const ::google::protobuf::RepeatedPtrField< ::fileInfo >&
      file_info() const;

  // required int32 port = 1;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2SShare)
 private:
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fileInfo > file_info_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class fileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fileInfo) */ {
 public:
  fileInfo();
  virtual ~fileInfo();

  fileInfo(const fileInfo& from);

  inline fileInfo& operator=(const fileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fileInfo(fileInfo&& from) noexcept
    : fileInfo() {
    *this = ::std::move(from);
  }

  inline fileInfo& operator=(fileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fileInfo* internal_default_instance() {
    return reinterpret_cast<const fileInfo*>(
               &_fileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(fileInfo* other);
  friend void swap(fileInfo& a, fileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fileInfo* New() const final {
    return CreateMaybeMessage<fileInfo>(NULL);
  }

  fileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<fileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const fileInfo& from);
  void MergeFrom(const fileInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // required int64 file_size = 2;
  bool has_file_size() const;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::int64 file_size() const;
  void set_file_size(::google::protobuf::int64 value);

  // required int64 file_ttl = 3;
  bool has_file_ttl() const;
  void clear_file_ttl();
  static const int kFileTtlFieldNumber = 3;
  ::google::protobuf::int64 file_ttl() const;
  void set_file_ttl(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:fileInfo)
 private:
  void set_has_file_name();
  void clear_has_file_name();
  void set_has_file_size();
  void clear_has_file_size();
  void set_has_file_ttl();
  void clear_has_file_ttl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::int64 file_size_;
  ::google::protobuf::int64 file_ttl_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CShare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:S2CShare) */ {
 public:
  S2CShare();
  virtual ~S2CShare();

  S2CShare(const S2CShare& from);

  inline S2CShare& operator=(const S2CShare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2CShare(S2CShare&& from) noexcept
    : S2CShare() {
    *this = ::std::move(from);
  }

  inline S2CShare& operator=(S2CShare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CShare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CShare* internal_default_instance() {
    return reinterpret_cast<const S2CShare*>(
               &_S2CShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(S2CShare* other);
  friend void swap(S2CShare& a, S2CShare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2CShare* New() const final {
    return CreateMaybeMessage<S2CShare>(NULL);
  }

  S2CShare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2CShare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2CShare& from);
  void MergeFrom(const S2CShare& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CShare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fileNameResponse resp = 1;
  int resp_size() const;
  void clear_resp();
  static const int kRespFieldNumber = 1;
  ::fileNameResponse* mutable_resp(int index);
  ::google::protobuf::RepeatedPtrField< ::fileNameResponse >*
      mutable_resp();
  const ::fileNameResponse& resp(int index) const;
  ::fileNameResponse* add_resp();
  const ::google::protobuf::RepeatedPtrField< ::fileNameResponse >&
      resp() const;

  // @@protoc_insertion_point(class_scope:S2CShare)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fileNameResponse > resp_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class fileNameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fileNameResponse) */ {
 public:
  fileNameResponse();
  virtual ~fileNameResponse();

  fileNameResponse(const fileNameResponse& from);

  inline fileNameResponse& operator=(const fileNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fileNameResponse(fileNameResponse&& from) noexcept
    : fileNameResponse() {
    *this = ::std::move(from);
  }

  inline fileNameResponse& operator=(fileNameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fileNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fileNameResponse* internal_default_instance() {
    return reinterpret_cast<const fileNameResponse*>(
               &_fileNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(fileNameResponse* other);
  friend void swap(fileNameResponse& a, fileNameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fileNameResponse* New() const final {
    return CreateMaybeMessage<fileNameResponse>(NULL);
  }

  fileNameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<fileNameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const fileNameResponse& from);
  void MergeFrom(const fileNameResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fileNameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // required bool resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  bool resp() const;
  void set_resp(bool value);

  // @@protoc_insertion_point(class_scope:fileNameResponse)
 private:
  void set_has_file_name();
  void clear_has_file_name();
  void set_has_resp();
  void clear_has_resp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  bool resp_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:C2SQuery) */ {
 public:
  C2SQuery();
  virtual ~C2SQuery();

  C2SQuery(const C2SQuery& from);

  inline C2SQuery& operator=(const C2SQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2SQuery(C2SQuery&& from) noexcept
    : C2SQuery() {
    *this = ::std::move(from);
  }

  inline C2SQuery& operator=(C2SQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SQuery* internal_default_instance() {
    return reinterpret_cast<const C2SQuery*>(
               &_C2SQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(C2SQuery* other);
  friend void swap(C2SQuery& a, C2SQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2SQuery* New() const final {
    return CreateMaybeMessage<C2SQuery>(NULL);
  }

  C2SQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<C2SQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const C2SQuery& from);
  void MergeFrom(const C2SQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:C2SQuery)
 private:
  void set_has_file_name();
  void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:S2CQuery) */ {
 public:
  S2CQuery();
  virtual ~S2CQuery();

  S2CQuery(const S2CQuery& from);

  inline S2CQuery& operator=(const S2CQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2CQuery(S2CQuery&& from) noexcept
    : S2CQuery() {
    *this = ::std::move(from);
  }

  inline S2CQuery& operator=(S2CQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CQuery* internal_default_instance() {
    return reinterpret_cast<const S2CQuery*>(
               &_S2CQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(S2CQuery* other);
  friend void swap(S2CQuery& a, S2CQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2CQuery* New() const final {
    return CreateMaybeMessage<S2CQuery>(NULL);
  }

  S2CQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2CQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2CQuery& from);
  void MergeFrom(const S2CQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 2;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // required bool resp = 1;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 1;
  bool resp() const;
  void set_resp(bool value);

  // optional int32 target_port = 4;
  bool has_target_port() const;
  void clear_target_port();
  static const int kTargetPortFieldNumber = 4;
  ::google::protobuf::int32 target_port() const;
  void set_target_port(::google::protobuf::int32 value);

  // optional int64 target_ip = 3;
  bool has_target_ip() const;
  void clear_target_ip();
  static const int kTargetIpFieldNumber = 3;
  ::google::protobuf::int64 target_ip() const;
  void set_target_ip(::google::protobuf::int64 value);

  // optional int64 file_size = 5;
  bool has_file_size() const;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 5;
  ::google::protobuf::int64 file_size() const;
  void set_file_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2CQuery)
 private:
  void set_has_resp();
  void clear_has_resp();
  void set_has_file_name();
  void clear_has_file_name();
  void set_has_target_ip();
  void clear_has_target_ip();
  void set_has_target_port();
  void clear_has_target_port();
  void set_has_file_size();
  void clear_has_file_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  bool resp_;
  ::google::protobuf::int32 target_port_;
  ::google::protobuf::int64 target_ip_;
  ::google::protobuf::int64 file_size_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SDelete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:C2SDelete) */ {
 public:
  C2SDelete();
  virtual ~C2SDelete();

  C2SDelete(const C2SDelete& from);

  inline C2SDelete& operator=(const C2SDelete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2SDelete(C2SDelete&& from) noexcept
    : C2SDelete() {
    *this = ::std::move(from);
  }

  inline C2SDelete& operator=(C2SDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDelete* internal_default_instance() {
    return reinterpret_cast<const C2SDelete*>(
               &_C2SDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(C2SDelete* other);
  friend void swap(C2SDelete& a, C2SDelete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2SDelete* New() const final {
    return CreateMaybeMessage<C2SDelete>(NULL);
  }

  C2SDelete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<C2SDelete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const C2SDelete& from);
  void MergeFrom(const C2SDelete& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDelete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string file_name = 1;
  int file_name_size() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name(int index) const;
  ::std::string* mutable_file_name(int index);
  void set_file_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(int index, ::std::string&& value);
  #endif
  void set_file_name(int index, const char* value);
  void set_file_name(int index, const char* value, size_t size);
  ::std::string* add_file_name();
  void add_file_name(const ::std::string& value);
  #if LANG_CXX11
  void add_file_name(::std::string&& value);
  #endif
  void add_file_name(const char* value);
  void add_file_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_name();

  // @@protoc_insertion_point(class_scope:C2SDelete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_name_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CDelete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:S2CDelete) */ {
 public:
  S2CDelete();
  virtual ~S2CDelete();

  S2CDelete(const S2CDelete& from);

  inline S2CDelete& operator=(const S2CDelete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2CDelete(S2CDelete&& from) noexcept
    : S2CDelete() {
    *this = ::std::move(from);
  }

  inline S2CDelete& operator=(S2CDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CDelete* internal_default_instance() {
    return reinterpret_cast<const S2CDelete*>(
               &_S2CDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(S2CDelete* other);
  friend void swap(S2CDelete& a, S2CDelete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2CDelete* New() const final {
    return CreateMaybeMessage<S2CDelete>(NULL);
  }

  S2CDelete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2CDelete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2CDelete& from);
  void MergeFrom(const S2CDelete& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CDelete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fileNameResponse resp = 1;
  int resp_size() const;
  void clear_resp();
  static const int kRespFieldNumber = 1;
  ::fileNameResponse* mutable_resp(int index);
  ::google::protobuf::RepeatedPtrField< ::fileNameResponse >*
      mutable_resp();
  const ::fileNameResponse& resp(int index) const;
  ::fileNameResponse* add_resp();
  const ::google::protobuf::RepeatedPtrField< ::fileNameResponse >&
      resp() const;

  // @@protoc_insertion_point(class_scope:S2CDelete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fileNameResponse > resp_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SQuit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:C2SQuit) */ {
 public:
  C2SQuit();
  virtual ~C2SQuit();

  C2SQuit(const C2SQuit& from);

  inline C2SQuit& operator=(const C2SQuit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2SQuit(C2SQuit&& from) noexcept
    : C2SQuit() {
    *this = ::std::move(from);
  }

  inline C2SQuit& operator=(C2SQuit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SQuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SQuit* internal_default_instance() {
    return reinterpret_cast<const C2SQuit*>(
               &_C2SQuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(C2SQuit* other);
  friend void swap(C2SQuit& a, C2SQuit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2SQuit* New() const final {
    return CreateMaybeMessage<C2SQuit>(NULL);
  }

  C2SQuit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<C2SQuit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const C2SQuit& from);
  void MergeFrom(const C2SQuit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SQuit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 request_quit = 1;
  bool has_request_quit() const;
  void clear_request_quit();
  static const int kRequestQuitFieldNumber = 1;
  ::google::protobuf::int32 request_quit() const;
  void set_request_quit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2SQuit)
 private:
  void set_has_request_quit();
  void clear_has_request_quit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 request_quit_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CQuit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:S2CQuit) */ {
 public:
  S2CQuit();
  virtual ~S2CQuit();

  S2CQuit(const S2CQuit& from);

  inline S2CQuit& operator=(const S2CQuit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2CQuit(S2CQuit&& from) noexcept
    : S2CQuit() {
    *this = ::std::move(from);
  }

  inline S2CQuit& operator=(S2CQuit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CQuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CQuit* internal_default_instance() {
    return reinterpret_cast<const S2CQuit*>(
               &_S2CQuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(S2CQuit* other);
  friend void swap(S2CQuit& a, S2CQuit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2CQuit* New() const final {
    return CreateMaybeMessage<S2CQuit>(NULL);
  }

  S2CQuit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2CQuit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2CQuit& from);
  void MergeFrom(const S2CQuit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CQuit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool resp = 1;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 1;
  bool resp() const;
  void set_resp(bool value);

  // @@protoc_insertion_point(class_scope:S2CQuit)
 private:
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool resp_;
  friend struct ::protobuf_server_5fpeer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2SShare

// required int32 port = 1;
inline bool C2SShare::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SShare::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SShare::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SShare::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 C2SShare::port() const {
  // @@protoc_insertion_point(field_get:C2SShare.port)
  return port_;
}
inline void C2SShare::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:C2SShare.port)
}

// repeated .fileInfo file_info = 2;
inline int C2SShare::file_info_size() const {
  return file_info_.size();
}
inline void C2SShare::clear_file_info() {
  file_info_.Clear();
}
inline ::fileInfo* C2SShare::mutable_file_info(int index) {
  // @@protoc_insertion_point(field_mutable:C2SShare.file_info)
  return file_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fileInfo >*
C2SShare::mutable_file_info() {
  // @@protoc_insertion_point(field_mutable_list:C2SShare.file_info)
  return &file_info_;
}
inline const ::fileInfo& C2SShare::file_info(int index) const {
  // @@protoc_insertion_point(field_get:C2SShare.file_info)
  return file_info_.Get(index);
}
inline ::fileInfo* C2SShare::add_file_info() {
  // @@protoc_insertion_point(field_add:C2SShare.file_info)
  return file_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fileInfo >&
C2SShare::file_info() const {
  // @@protoc_insertion_point(field_list:C2SShare.file_info)
  return file_info_;
}

// -------------------------------------------------------------------

// fileInfo

// required string file_name = 1;
inline bool fileInfo::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fileInfo::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fileInfo::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fileInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& fileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:fileInfo.file_name)
  return file_name_.GetNoArena();
}
inline void fileInfo::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fileInfo.file_name)
}
#if LANG_CXX11
inline void fileInfo::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fileInfo.file_name)
}
#endif
inline void fileInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fileInfo.file_name)
}
inline void fileInfo::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fileInfo.file_name)
}
inline ::std::string* fileInfo::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:fileInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:fileInfo.file_name)
  if (!has_file_name()) {
    return NULL;
  }
  clear_has_file_name();
  return file_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:fileInfo.file_name)
}

// required int64 file_size = 2;
inline bool fileInfo::has_file_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fileInfo::set_has_file_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fileInfo::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fileInfo::clear_file_size() {
  file_size_ = GOOGLE_LONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::int64 fileInfo::file_size() const {
  // @@protoc_insertion_point(field_get:fileInfo.file_size)
  return file_size_;
}
inline void fileInfo::set_file_size(::google::protobuf::int64 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:fileInfo.file_size)
}

// required int64 file_ttl = 3;
inline bool fileInfo::has_file_ttl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fileInfo::set_has_file_ttl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fileInfo::clear_has_file_ttl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fileInfo::clear_file_ttl() {
  file_ttl_ = GOOGLE_LONGLONG(0);
  clear_has_file_ttl();
}
inline ::google::protobuf::int64 fileInfo::file_ttl() const {
  // @@protoc_insertion_point(field_get:fileInfo.file_ttl)
  return file_ttl_;
}
inline void fileInfo::set_file_ttl(::google::protobuf::int64 value) {
  set_has_file_ttl();
  file_ttl_ = value;
  // @@protoc_insertion_point(field_set:fileInfo.file_ttl)
}

// -------------------------------------------------------------------

// S2CShare

// repeated .fileNameResponse resp = 1;
inline int S2CShare::resp_size() const {
  return resp_.size();
}
inline void S2CShare::clear_resp() {
  resp_.Clear();
}
inline ::fileNameResponse* S2CShare::mutable_resp(int index) {
  // @@protoc_insertion_point(field_mutable:S2CShare.resp)
  return resp_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fileNameResponse >*
S2CShare::mutable_resp() {
  // @@protoc_insertion_point(field_mutable_list:S2CShare.resp)
  return &resp_;
}
inline const ::fileNameResponse& S2CShare::resp(int index) const {
  // @@protoc_insertion_point(field_get:S2CShare.resp)
  return resp_.Get(index);
}
inline ::fileNameResponse* S2CShare::add_resp() {
  // @@protoc_insertion_point(field_add:S2CShare.resp)
  return resp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fileNameResponse >&
S2CShare::resp() const {
  // @@protoc_insertion_point(field_list:S2CShare.resp)
  return resp_;
}

// -------------------------------------------------------------------

// fileNameResponse

// required string file_name = 1;
inline bool fileNameResponse::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fileNameResponse::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fileNameResponse::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fileNameResponse::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& fileNameResponse::file_name() const {
  // @@protoc_insertion_point(field_get:fileNameResponse.file_name)
  return file_name_.GetNoArena();
}
inline void fileNameResponse::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fileNameResponse.file_name)
}
#if LANG_CXX11
inline void fileNameResponse::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fileNameResponse.file_name)
}
#endif
inline void fileNameResponse::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fileNameResponse.file_name)
}
inline void fileNameResponse::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fileNameResponse.file_name)
}
inline ::std::string* fileNameResponse::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:fileNameResponse.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileNameResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:fileNameResponse.file_name)
  if (!has_file_name()) {
    return NULL;
  }
  clear_has_file_name();
  return file_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileNameResponse::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:fileNameResponse.file_name)
}

// required bool resp = 2;
inline bool fileNameResponse::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fileNameResponse::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fileNameResponse::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fileNameResponse::clear_resp() {
  resp_ = false;
  clear_has_resp();
}
inline bool fileNameResponse::resp() const {
  // @@protoc_insertion_point(field_get:fileNameResponse.resp)
  return resp_;
}
inline void fileNameResponse::set_resp(bool value) {
  set_has_resp();
  resp_ = value;
  // @@protoc_insertion_point(field_set:fileNameResponse.resp)
}

// -------------------------------------------------------------------

// C2SQuery

// required string file_name = 1;
inline bool C2SQuery::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SQuery::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SQuery::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SQuery::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& C2SQuery::file_name() const {
  // @@protoc_insertion_point(field_get:C2SQuery.file_name)
  return file_name_.GetNoArena();
}
inline void C2SQuery::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:C2SQuery.file_name)
}
#if LANG_CXX11
inline void C2SQuery::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:C2SQuery.file_name)
}
#endif
inline void C2SQuery::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:C2SQuery.file_name)
}
inline void C2SQuery::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:C2SQuery.file_name)
}
inline ::std::string* C2SQuery::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:C2SQuery.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SQuery::release_file_name() {
  // @@protoc_insertion_point(field_release:C2SQuery.file_name)
  if (!has_file_name()) {
    return NULL;
  }
  clear_has_file_name();
  return file_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SQuery::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:C2SQuery.file_name)
}

// -------------------------------------------------------------------

// S2CQuery

// required bool resp = 1;
inline bool S2CQuery::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2CQuery::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2CQuery::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2CQuery::clear_resp() {
  resp_ = false;
  clear_has_resp();
}
inline bool S2CQuery::resp() const {
  // @@protoc_insertion_point(field_get:S2CQuery.resp)
  return resp_;
}
inline void S2CQuery::set_resp(bool value) {
  set_has_resp();
  resp_ = value;
  // @@protoc_insertion_point(field_set:S2CQuery.resp)
}

// optional string file_name = 2;
inline bool S2CQuery::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2CQuery::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2CQuery::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2CQuery::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& S2CQuery::file_name() const {
  // @@protoc_insertion_point(field_get:S2CQuery.file_name)
  return file_name_.GetNoArena();
}
inline void S2CQuery::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:S2CQuery.file_name)
}
#if LANG_CXX11
inline void S2CQuery::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:S2CQuery.file_name)
}
#endif
inline void S2CQuery::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:S2CQuery.file_name)
}
inline void S2CQuery::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:S2CQuery.file_name)
}
inline ::std::string* S2CQuery::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:S2CQuery.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2CQuery::release_file_name() {
  // @@protoc_insertion_point(field_release:S2CQuery.file_name)
  if (!has_file_name()) {
    return NULL;
  }
  clear_has_file_name();
  return file_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2CQuery::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:S2CQuery.file_name)
}

// optional int64 target_ip = 3;
inline bool S2CQuery::has_target_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2CQuery::set_has_target_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2CQuery::clear_has_target_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2CQuery::clear_target_ip() {
  target_ip_ = GOOGLE_LONGLONG(0);
  clear_has_target_ip();
}
inline ::google::protobuf::int64 S2CQuery::target_ip() const {
  // @@protoc_insertion_point(field_get:S2CQuery.target_ip)
  return target_ip_;
}
inline void S2CQuery::set_target_ip(::google::protobuf::int64 value) {
  set_has_target_ip();
  target_ip_ = value;
  // @@protoc_insertion_point(field_set:S2CQuery.target_ip)
}

// optional int32 target_port = 4;
inline bool S2CQuery::has_target_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2CQuery::set_has_target_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2CQuery::clear_has_target_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2CQuery::clear_target_port() {
  target_port_ = 0;
  clear_has_target_port();
}
inline ::google::protobuf::int32 S2CQuery::target_port() const {
  // @@protoc_insertion_point(field_get:S2CQuery.target_port)
  return target_port_;
}
inline void S2CQuery::set_target_port(::google::protobuf::int32 value) {
  set_has_target_port();
  target_port_ = value;
  // @@protoc_insertion_point(field_set:S2CQuery.target_port)
}

// optional int64 file_size = 5;
inline bool S2CQuery::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2CQuery::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2CQuery::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2CQuery::clear_file_size() {
  file_size_ = GOOGLE_LONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::int64 S2CQuery::file_size() const {
  // @@protoc_insertion_point(field_get:S2CQuery.file_size)
  return file_size_;
}
inline void S2CQuery::set_file_size(::google::protobuf::int64 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:S2CQuery.file_size)
}

// -------------------------------------------------------------------

// C2SDelete

// repeated string file_name = 1;
inline int C2SDelete::file_name_size() const {
  return file_name_.size();
}
inline void C2SDelete::clear_file_name() {
  file_name_.Clear();
}
inline const ::std::string& C2SDelete::file_name(int index) const {
  // @@protoc_insertion_point(field_get:C2SDelete.file_name)
  return file_name_.Get(index);
}
inline ::std::string* C2SDelete::mutable_file_name(int index) {
  // @@protoc_insertion_point(field_mutable:C2SDelete.file_name)
  return file_name_.Mutable(index);
}
inline void C2SDelete::set_file_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:C2SDelete.file_name)
  file_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void C2SDelete::set_file_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:C2SDelete.file_name)
  file_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void C2SDelete::set_file_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:C2SDelete.file_name)
}
inline void C2SDelete::set_file_name(int index, const char* value, size_t size) {
  file_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:C2SDelete.file_name)
}
inline ::std::string* C2SDelete::add_file_name() {
  // @@protoc_insertion_point(field_add_mutable:C2SDelete.file_name)
  return file_name_.Add();
}
inline void C2SDelete::add_file_name(const ::std::string& value) {
  file_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:C2SDelete.file_name)
}
#if LANG_CXX11
inline void C2SDelete::add_file_name(::std::string&& value) {
  file_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:C2SDelete.file_name)
}
#endif
inline void C2SDelete::add_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:C2SDelete.file_name)
}
inline void C2SDelete::add_file_name(const char* value, size_t size) {
  file_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:C2SDelete.file_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
C2SDelete::file_name() const {
  // @@protoc_insertion_point(field_list:C2SDelete.file_name)
  return file_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
C2SDelete::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable_list:C2SDelete.file_name)
  return &file_name_;
}

// -------------------------------------------------------------------

// S2CDelete

// repeated .fileNameResponse resp = 1;
inline int S2CDelete::resp_size() const {
  return resp_.size();
}
inline void S2CDelete::clear_resp() {
  resp_.Clear();
}
inline ::fileNameResponse* S2CDelete::mutable_resp(int index) {
  // @@protoc_insertion_point(field_mutable:S2CDelete.resp)
  return resp_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fileNameResponse >*
S2CDelete::mutable_resp() {
  // @@protoc_insertion_point(field_mutable_list:S2CDelete.resp)
  return &resp_;
}
inline const ::fileNameResponse& S2CDelete::resp(int index) const {
  // @@protoc_insertion_point(field_get:S2CDelete.resp)
  return resp_.Get(index);
}
inline ::fileNameResponse* S2CDelete::add_resp() {
  // @@protoc_insertion_point(field_add:S2CDelete.resp)
  return resp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fileNameResponse >&
S2CDelete::resp() const {
  // @@protoc_insertion_point(field_list:S2CDelete.resp)
  return resp_;
}

// -------------------------------------------------------------------

// C2SQuit

// required int32 request_quit = 1;
inline bool C2SQuit::has_request_quit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SQuit::set_has_request_quit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SQuit::clear_has_request_quit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SQuit::clear_request_quit() {
  request_quit_ = 0;
  clear_has_request_quit();
}
inline ::google::protobuf::int32 C2SQuit::request_quit() const {
  // @@protoc_insertion_point(field_get:C2SQuit.request_quit)
  return request_quit_;
}
inline void C2SQuit::set_request_quit(::google::protobuf::int32 value) {
  set_has_request_quit();
  request_quit_ = value;
  // @@protoc_insertion_point(field_set:C2SQuit.request_quit)
}

// -------------------------------------------------------------------

// S2CQuit

// required bool resp = 1;
inline bool S2CQuit::has_resp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2CQuit::set_has_resp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2CQuit::clear_has_resp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2CQuit::clear_resp() {
  resp_ = false;
  clear_has_resp();
}
inline bool S2CQuit::resp() const {
  // @@protoc_insertion_point(field_get:S2CQuit.resp)
  return resp_;
}
inline void S2CQuit::set_resp(bool value) {
  set_has_resp();
  resp_ = value;
  // @@protoc_insertion_point(field_set:S2CQuit.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_5fpeer_2eproto
